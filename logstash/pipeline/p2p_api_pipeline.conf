input {
	beats {
		port => 5044
	}
	tcp {
		port => 5001
	}
}

filter {
    mutate {
        add_field => [ "mew_field", "Hello human!" ]
		# remove => [ "client" ]
	}
	if "beats_input_codec_plain_applied" in [tags] {
		mutate {
			remove_tag => ["beats_input_codec_plain_applied"]
		}
	}

	# "message" => {"@timestamp":"2022-02-01T09:29:01.781067+00:00","@source":"b58a81938fbf","@fields":{"channel":"api-request-logger","level":200,"env":"dev","version":"cb2956e1","ctxt_ip":"172.20.0.9","ctxt_userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.99 Safari/537.36","ctxt_url":"/v1/investor/logout","ctxt_request":[],"ctxt_response":{"message":"Your request was made with invalid credentials.","errors":[{"message":"Your request was made with invalid credentials.","statusCode":401,"code":401}]}},"@message":"Api request","@tags":["api-request-logger"],"@type":"api-request-response"}

	grok {
		# patterns_dir => "/usr/share/logstash/pipeline/grok-patterns"

		match => {
			"message" => [
				"%{GREEDYDATA:json_data}"
			]
		}

		# match => {
		# 	"message" => [
		# 		"channel: %{DATA:channel}",
		# 		"level: %{INT:level}",
		# 		"env: %{WORD:env}",
		# 		"version: %{INT:version}",
		# 		"ctxt_ip: %{IP:ctxt_ip}",
		# 		"ctxt_userAgent: %{DATA:ctxt_userAgent}",
		# 		"ctxt_url: %{URIPATH:ctxt_url}",
		# 		"ctxt_request: %{DATA:ctxt_request}",
		# 		"id: %{NUMBER:[ctxt_response][items][id]}",
		# 		"title: %{WORD:[ctxt_response][items][id][title]}",
		# 		"icon: %{DATA:[ctxt_response][items][id][icon]}",
		# 		"percent: %{NUMBER.NUMBER:[ctxt_response][items][id][percent]}",
		# 		"minAmount: %{NUMBER:[ctxt_response][items][id][minAmount]}",
		# 		"maxAmount: %{NUMBER:[ctxt_response][items][id][maxAmount]}",
		# 		"locked: %{WORD:[ctxt_response][items][id][locked]}"
		# 	]
		# remove_field => "message"
		# }

		# match => ["message", "\[%{TIMESTAMP_ISO8601:timestamp}\]\[%{DATA:loglevel}%{SPACE}\]\[%{DATA:source}%{SPACE}\]%{SPACE}\[%{DATA:node}\]%{SPACE}\[%{DATA:index}\] %{NOTSPACE} \[%{DATA:updated-type}\]",
        #           "message", "\[%{TIMESTAMP_ISO8601:timestamp}\]\[%{DATA:loglevel}%{SPACE}\]\[%{DATA:source}%{SPACE}\]%{SPACE}\[%{DATA:node}\] (\[%{NOTSPACE:Index}\]\[%{NUMBER:shards}\])?%{GREEDYDATA}"
      	# ]
	}
}

filter {
  json{
    source => "json_data"
    target => "parsed_json"
  }
}

output {
	elasticsearch {
		hosts => "elasticsearch:9200"
		index => "p2p-stage-app-%{[@metadata][beat]}-%{+YYYY.MM.dd}"

		ecs_compatibility => disabled
	}
}
